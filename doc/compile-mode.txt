*compile-mode.txt*       A plugin for Neovim inspired by Emacs' Compilation Mode

==============================================================================
Table of Contents                             *compile-mode-table-of-contents*

1. Introduction                                    |compile-mode-introduction|
2. Installation                                    |compile-mode-installation|
3. Compilation buffer                        |compile-mode-compilation-buffer|
4. Errors                                                |compile-mode-errors|
5. Configuration                                  |compile-mode-configuration|
  - default_command                             |compile-mode.default_command|
  - baleia_setup                                   |compile-mode.baleia_setup|
  - error_regexp_table                       |compile-mode.error_regexp_table|
  - error_ignore_file_list               |compile-mode.error_ignore_file_list|
  - error_threshold                             |compile-mode.error_threshold|
  - auto_jump_to_first_error           |compile-mode.auto_jump_to_first_error|
  - error_locus_highlight                 |compile-mode.error_locus_highlight|
  - use_diagnostics                             |compile-mode.use_diagnostics|
  - recompile_no_fail                         |compile-mode.recompile_no_fail|
  - ask_about_save                               |compile-mode.ask_about_save|
  - ask_to_interrupt                           |compile-mode.ask_to_interrupt|
  - buffer_name                                     |compile-mode.buffer_name|
  - time_format                                     |compile-mode.time_format|
  - hidden_output                                 |compile-mode.hidden_output|
  - environment                                     |compile-mode.environment|
  - clear_environment                         |compile-mode.clear_environment|
  - debug                                                 |compile-mode.debug|
  - input_word_completion                 |compile-mode.input_word_completion|
6. API                                                      |compile-mode-api|
  - compile()                                         |compile-mode.compile()|
  - recompile()                                     |compile-mode.recompile()|
  - first_error()                                 |compile-mode.first_error()|
  - current_error()                             |compile-mode.current_error()|
  - next_error()                                   |compile-mode.next_error()|
  - prev_error()                                   |compile-mode.prev_error()|
  - send_to_qflist()                           |compile-mode.send_to_qflist()|
  - add_to_qflist()                             |compile-mode.add_to_qflist()|
  - next_error_follow()                     |compile-mode.next_error_follow()|
  - goto_error()                                   |compile-mode.goto_error()|
  - move_to_next_error()                                |move_to_next_error()|
  - move_to_next_file()                                  |move_to_next_file()|
  - move_to_prev_error()                                |move_to_prev_error()|
  - move_to_prev_file()                                  |move_to_prev_file()|
  - interrupt()                                     |compile-mode.interrupt()|
7. Commands                                            |compile-mode-commands|
  - :Compile                                                        |:Compile|
  - :Recompile                                                    |:Recompile|
  - :FirstError                                                  |:FirstError|
  - :CurrentError                                              |:CurrentError|
  - :NextError                                                    |:NextError|
  - :PrevError                                                    |:PrevError|
  - :QuickfixErrors                                          |:QuickfixErrors|
  - :NextErrorFollow                                        |:NextErrorFollow|
  - :CompileGotoError                                      |:CompileGotoError|
  - :CompileNextError                                      |:CompileNextError|
  - :CompileNextFile                                        |:CompileNextFile|
  - :CompilePrevError                                      |:CompilePrevError|
  - :CompilePrevFile                                        |:CompilePrevFile|
  - :CompileInterrupt                                      |:CompileInterrupt|
8. Highlights                                        |compile-mode-highlights|
  - CompileModeError                                     |hl-CompileModeError|
  - CompileModeInfo                                       |hl-CompileModeInfo|
  - CompileModeWarning                                 |hl-CompileModeWarning|
  - CompileModeMessage                                 |hl-CompileModeMessage|
  - CompileModeMessageRow                           |hl-CompileModeMessageRow|
  - CompileModeMessageCol                           |hl-CompileModeMessageCol|
  - CompileModeCommandOutput                     |hl-CompileModeCommandOutput|
  - CompileModeOutputFile                           |hl-CompileModeOutputFile|
  - CompileModeCheckResult                         |hl-CompileModeCheckResult|
  - CompileModeCheckTarget                               |hl-CompileModeError|
  - CompileModeDirectoryMessage               |hl-CompileModeDirectoryMessage|
  - CompileModeErrorLocus                           |hl-CompileModeErrorLocus|
9. Autocmd                                              |compile-mode-autocmd|
  - CompilationFinished                                  |CompilationFinished|

==============================================================================
1. Introduction                                    *compile-mode-introduction*

`compile-mode.nvim` is a Neovim plugin which emulates the features of Emacs’
`Compilation Mode`. It allows you to run commands which are output into a
special buffer, and then rerun that command over and over again as much as you
need. See Emacs Compilation Mode
<https://www.gnu.org/software/emacs/manual/html_node/emacs/Compilation-Mode.html>
for more details.

==============================================================================
2. Installation                                    *compile-mode-installation*

Use your favorite plugin manager. `compile-mode.nvim` depends on plenary.nvim
<https://github.com/nvim-lua/plenary.nvim> (and optionally baleia.nvim
<https://github.com/m00qek/baleia.nvim>).

WARNING: `compile-mode.nvim` only supports Neovim versions v0.10.0 and higher,
and isn't expected to work for earlier versions.

Here’s an example of a Lazy <https://github.com/folke/lazy.nvim> config for
`compile-mode.nvim`:

>lua
    return {
      "ej-shafran/compile-mode.nvim",
      tag = "v5.*",
      -- you can just use the latest version:
      -- branch = "latest",
      -- or the most up-to-date updates:
      -- branch = "nightly",
      dependencies = {
	  "nvim-lua/plenary.nvim",
	  -- if you want to enable coloring of ANSI escape codes in
	  -- compilation output, add:
	  -- { "m00qek/baleia.nvim", tag = "v1.3.0" },
      },
      config = function()
	  ---@type CompileModeOpts
	  vim.g.compile_mode = {
	      -- to add ANSI escape code support, add:
	      -- baleia_setup = true,
	  }
      end
    }
<

==============================================================================
3. Compilation buffer                        *compile-mode-compilation-buffer*

The compilation buffer is the buffer into which the output of compilation
commands is placed. By default, its name is `"*compilation*"` (though this can
be configured using the |compile-mode.buffer_name| option). Its filetype is
`compilation` - this can be used to setup |autocmd|s (and thus custom keymaps
and the like).

After a command has been run, the buffer’s output will contain:

- a modeline specifying the filetype and modifying the path to include the
  directory from which the command was run
- the time at which compilation started
- the compilation command which was executed
- the output (`stdout` and `stderr`) of the command
- the exit status of the command and when it occurred; a command can exit
  successfully (exit code 0), abnormally (non-zero exit code), by interruption
  (running another compilation command or calling |:CompileInterrupt|), by
  segfault (SIGSEGV), or by termination (SIGTERM)

If a compilation command is running and another one is triggered, the user is
prompted whether to interrupt the already running process (unless
|compile-mode.ask_to_interrupt| is `false`). If they confirm, the original
command is interrupted (using |jobstop()|) and this is reported in the
compilation buffer. Then, after a short delay, the compilation buffer is
cleared and the new command starts running.

The compilation buffer has a few local commands and keymaps. The local
commands (and their keymaps, if mentioned) are:

- |:CompileGotoError| - mapped to `<CR>`
- |:CompileInterrupt| - mapped to `<C-c>`
- |:CompileNextError| - mapped to `<C-g>n`
- |:CompileNextFile| - mapped to `<C-g>]`
- |:CompilePrevError| - mapped to `<C-g>p`
- |:CompilePrevFile| - mapped to `<C-g>[`

Additional keymaps within the compilation buffer are:

- `q` is mapped to `<CMD>q<CR>` for easy closing of the compilation buffer.
- `<C-r>` is mapped to `<CMD>Recompile<CR>` for quick recompilation.
- `<C-g>f` is mapped to `<CMD>NextErrorFollow<CR>` to preview the error under
  the cursor.
- `gf` is mapped to a custom function that behaves similarly to how |gf| does
  regularly, but respects "Entering directory" and "Leaving directory"
  messages from `make` to tell what directory a file might be in.
- `<C-w>f` is mapped like `gf`, but behaves like |CTRL-W_f| instead.

The compilation buffer is deleted automatically when Neovim would be closed, so
unsaved changes don’t get in the way. It also has the |'buftype'| option set
to `nofile`.

==============================================================================
4. Errors                                                *compile-mode-errors*

The compilation buffer is checked for errors in real-time, which can then be
navigated between using |:CompileGotoError|, |:NextError|, |:PrevError| and
|:CurrentError|. Note: these commands all respect "Entering directory" and
"Leaving directory" messages from `make` in order to determine which directory
a certain error's file might be in.

Errors are defined using the `error_regexp_table` option. Each field in the
table consists of a key (the name of the error’s source, used for debug
information) and a table value. This table has the following keys:

- {regex} (string) a Vim regex which captures the error and the relevant
  capture groups; if this regex matches a line, an error is determined to
  exist on that line
- {filename} (integer) the capture group number for the error’s filename
  (capture groups start at 1)
- {row} (integer|[integer, integer]) either the capture group for the row on
  which the error occurred, or capture groups for the start and end of the row
  range in which the error occurred (optional)
- {col} (integer|[integer, integer]) either the capture group for the column
  on which the error occurred, or the capture groups for the start and end of
  the column range in which the error occurred (optional)
- {type} (level|[integer,integer?]) either an error type (`INFO`, `WARNING`,
  or `ERROR`, taken from `require("compile-mode").level`) or a tuple of
  capture groups (optional, default `ERROR`)
    - If capture groups are provided and the first capture group is matched,
      the error is considered of type `WARNING`. If the second capture group
      matched, the error is considered to be of type `INFO`.
- {priority} (integer) the priority for this matcher, used to determine what
  error to use in the case where multiple different matchers are matched by
  the same line; the matcher with the highest priority which matches the
  current line will be used (optional - defaults to `1`)

Note: a type alias - `CompileModeRegexpMatcher` - is available for the values
of `error_regexp_table`.

For example, to add TypeScript errors:

>lua
    ---@type CompileModeOpts
    vim.g.compile_mode = {
        error_regexp_table = {
          typescript = {
	    -- TypeScript errors take the form
	    -- "path/to/error-file.ts(13,23): error TS22: etc."
            regex = "^\\(.\\+\\)(\\([1-9][0-9]*\\),\\([1-9][0-9]*\\)): error TS[1-9][0-9]*:",
            filename = 1,
            row = 2,
            col = 3,
          }
        }
    }
<

To see the default for `error_regexp_table`, look at the source code in
`lua/compile-mode/errors.lua` in the plugin’s directory (or in the repo
itself).

==============================================================================
5. Configuration                                  *compile-mode-configuration*

                                                          *vim.g.compile_mode*
To configure `compile-mode.nvim`, use the `vim.g.compile_mode` variable. It
should be set to a table. The `CompileModeOpts` class exists as a Lua
annotation for people using `lua-language-server` and something like
`lazydev.nvim` <https://github.com/folke/lazydev.nvim>.

An example configuration:

>lua
    ---@type CompileModeOpts
    vim.g.compile_mode = {
	-- for an empty prompt
	default_command = "",
    }
<

Valid keys and values for `vim.g.compile_mode`:

default_command                                 *compile-mode.default_command*
    The string to show in the |compile-mode.compile()| prompt as a default.
    You can set it to `""` for an empty prompt. Defaults to: `"make -k "`.

baleia_setup                                       *compile-mode.baleia_setup*
    When `true`, baleia.nvim will be set up for the compilation buffer, which
    will color in ANSI escape codes in the compilation output. This option can
    also be a table of options to pass to `baleia.setup()`.

error_regexp_table                            *compile-mode.error_regexp_table
    See |compile-mode-errors|.

error_ignore_file_list                   *compile-mode.error_ignore_file_list*
    A list of Vim regexes to run each error’s filename by, to check if this
    file should be ignored. Defaults to: `{ "/bin/[a-z]*sh$" }`. Passing in
    this option does not override this, but instead extends the list.

error_threshold                                 *compile-mode.error_threshold*
    An error type (`INFO`, `WARNING`, or `ERROR`, taken from
    `require("compile-mode").level`) which determines the lowest level of
    error that should be considered when jumping/moving between errors.
    Defaults to `WARNING`.

auto_jump_to_first_error               *compile-mode.auto_jump_to_first_error*
    When `true`, compiling jumps to the first error as soon as it is
    available.

error_locus_highlight                     *compile-mode.error_locus_highlight*
    Configure the highlighting that occurs when jumping to an error's locus.
    If set to `false` or `nil`, no highlighting will be done. If set to a
    number, it determines for how many milliseconds the highlight will appear.
    If set to `true`, the highlight will be constant. Defaults to `500`.

use_diagnostics                                 *compile-mode.use_diagnostics*
    When `true`, jumping to an error will cause Neovim diagnostics to show up
    for all compilation errors within the jumped-to file, instead of opening
    the compilation buffer to show the error message. These disagnostics
    will disappear when compiling again. |vim.diagnostics|

recompile_no_fail                             *compile-mode.recompile_no_fail*
    When `true`, running |:Recompile| without a prior command will not fail,
    but instead simply trigger a call to |:Compile|.

ask_about_save                                   *compile-mode.ask_about_save*
    When `true`, compiling asks about each unsaved buffer, checking whether to
    save it or not, before running the compilation command. Defaults to
    `true`.

ask_to_interrupt                               *compile-mode.ask_to_interrupt*
    When `true`, compiling when another compilation command is currently
    running will confirm whether to interrupt instead of interrupting
    automatically. Defaults to `true`.

buffer_name                                         *compile-mode.buffer_name*
    The name for the compilation buffer. Defaults to `"*compilation*"`.

time_format                                         *compile-mode.time_format*
    The way to format the time displayed at the top of the compilation buffer.
    Passed into |strftime()|. Defaults to: `"%a %b %e %H:%M:%S"`.

hidden_output                                     *compile-mode.hidden_output*
    A Vim regex or list of Vim regexes run on every line in the compilation
    buffer which will be substituted with empty strings.

environment                                         *compile-mode.environment*
    A table of string values and string keys, defining additional environment
    variables which each compilation command should inherit.

    Uses the `env` option of |jobstart()|. |jobstart-env| |jobstart-options|

    For example:

    >lua
	---@type CompileModeOpts
	vim.g.compile_mode = {
	  environment = {
	    CI = "true"
	  }
	}
<

clear_environment                             *compile-mode.clear_environment*
    When `true`, `environment` defines each compilation command's environment
    exactly, instead of merging with the current environment.

    Uses the `clear_env` option of |jobstart()|. |jobstart-options|

debug                                                     *compile-mode.debug*
    Print additional debug information. This is printed using |print|, so you
    can inspect it with |:messages|.

input_word_completion                     *compile-mode.input_word_completion*
    By default, the completion provided by this plugin for the prompt which is
    used if no arguments have been provided to |:Compile| returns its options
    as an entire line, since this is what default Vim completion expects from
    the completion of |input()|. However, if you're using a custom completion
    engine (such as `nvim-cmp` with `cmp-cmdline-prompt` - see
    <https://github.com/hrsh7th/nvim-cmp>) you may want these completions to
    return words as options.

    By default, this plugin checks if you have `cmp-cmdline-prompt` loaded,
    and if so returns words for completion. If you're using some other
    autocompletion solution and find issues with the completion, you may want
    to try setting this to `true`.

==============================================================================
6. API                                                      *compile-mode-api*


compile({param})                                      *compile-mode.compile()*
    Run a command and place its output in the compilation buffer, reporting on
    its result. See |:Compile|.

    Parameters:
	- {param} (table) command param (optional)
	    - {param.args}: the string of the command itself, or `nil` if the
	      user should be prompted to enter a command
	    - {param.smods}: a table - see |:command-modifiers| for more

recompile({param})                                  *compile-mode.recompile()*
    Reruns the last compiled command. See |:Recompile|.

    Parameters:
	- {param} (table) command param (optional)
	    - {param.smods}: a table - see |:command-modifiers| for more

first_error({param})                              *compile-mode.first_error()*
    Jumps to the Nth error within the compilation buffer, based on the count.
    See |:FirstError|.

    Parameters:
	- {param} (table) command param (optional)
	  - {param.count}: which error to jump to; default `1`
	  - {param.smods}: a table - see |:command-modifiers| for more; this
	    will affect the way windows are created when jumping to errors, if
	    there's a need to open a new window

current_error({param})                          *compile-mode.current_error()*
    Jumps to the current error within the compilation buffer. See
    |:CurrentError|.

    Parameters:
	- {param} (table) command param (optional)
	    - {param.smods}: a table - see |:command-modifiers| for more; this
	      will affect the way windows are created when jumping to errors,
	      if there's a need to open a new window

next_error({param})                                *compile-mode.next_error()*
    Jumps to the next error within the compilation buffer. See |:NextError|.

    Parameters:
	- {param} (table) command param (optional)
	    - {param.count}: how many errors forwards to jump; default `1`
	    - {param.smods}: a table - see |:command-modifiers| for more; this
	      will affect the way windows are created when jumping to errors,
	      if there's a need to open a new window

prev_error({param})                                *compile-mode.prev_error()*
    Jumps to a prior error within the compilation buffer. See |:PrevError|.

    Parameters:
	- {param} (table) command param (optional)
	    - {param.count}: how many errors backwards to jump; default `1`
	    - {param.smods}: a table - see |:command-modifiers| for more; this
	      will affect the way windows are created when jumping to errors,
	      if there's a need to open a new window

send_to_qflist()                               *compile-mode.send_to_qflist()*
    Loads all compilation errors into the quickfix list, replacing the
    existing list.

add_to_qflist()                                 *compile-mode.add_to_qflist()*
    Loads all compilation errors into the quickfix list, appending onto the
    existing list.

next_error_follow()                         *compile-mode.next_error_follow()*
    Toggles "Next Error Follow" mode. See |:NextErrorFollow|.

goto_error({param})                                *compile-mode.goto_error()*
    Jumps to the error under the cursor. See |:CompileGotoError|.

    Parameters:
	- {param} (table) command param (optional)
	    - {param.smods}: a table - see |:command-modifiers| for more; this
	      will affect the way windows are created when jumping to errors,
	      if there's a need to open a new window

move_to_next_error({param})                *compile-mode.move_to_next_error()*
    Move to the line of the next error within the compilation buffer. See
    |:CompileNextError|.

    Parameters:
	- {param} (table) command param (optional)
	    - {param.count}: how many errors forwards to move; default `1`

move_to_next_file({param})                  *compile-mode.move_to_next_file()*
    Move to the line of the next error within the compilation buffer that has
    a different file to the current error. See |:CompileNextFile|.

    Parameters:
	- {param} (table) command param (optional)
	    - {param.count}: how many files forwards to move; default `1`

move_to_prev_error({param})                *compile-mode.move_to_prev_error()*
    Move to the line of the previous error within the compilation buffer. See
    |:CompilePrevError|.

    Parameters:
	- {param} (table) command param (optional)
	    - {param.count}: how many errors backwards to move; default `1`

move_to_prev_file({param})                  *compile-mode.move_to_prev_file()*
    Move to the line of the previous error within the compilation buffer that
    has a different file to the current error. See |:CompilePrevFile|.

    Parameters:
	- {param} (table) command param (optional)
	    - {param.count}: how many files backwards to move; default `1`

interrupt()                                         *compile-mode.interrupt()*
    Interrupts the currently running compilation. See |:CompileInterrupt|.

==============================================================================
7. Commands                                            *compile-mode-commands*


:Compile[!]                                                         *:Compile*
    Runs a command and places its output in the compilation buffer. The
    command is run from the current working directory. The compilation buffer
    is opened in a new split if it isn’t already opened. If an argument is
    present, it is used as the command. Otherwise, the user is prompted using
    |vim.ui.input()|.

    With a bang (`:Compile!`), the compilation buffer will only be updated
    once the command finishes (i.e. the compilation command will be run
    synchronously).

    The following commands work when prefixed to `:Compile`:

    - |:vert|
    - |:aboveleft|, |:belowright|, |:topleft| and |:botright|
    - |:silent|
    - |:hide|
    - |:tab|

    Additionally, you can run the command with a |count| to set the size of
    the opened window, like with |:split|.

:Recompile[!]                                                     *:Recompile*
    Reruns the last compiled command. If there isn’t one, the error is
    reported using |vim.notify()|. The compilation buffer is opened in a new
    split if it isn’t already opened. The command is rerun from the directory
    in which it was originally run.

    With a bang (`:Recompile!`), the compilation buffer will only be updated
    once the command finishes (i.e. the compilation command will be run
    synchronously).

    The following commands work when prefixed to `:Recompile`:

    - |:vert|
    - |:aboveleft|, |:belowright|, |:topleft| and |:botright|
    - |:silent|
    - |:hide|
    - |:tab|

    Additionally, you can run the command with a |count| to set the size of the
    opened window, like with |:split|.

    Mapped to `<C-r>` within the compilation buffer.

:FirstError                                                      *:FirstError*
:[N]FirstError
    Jump to the Nth error in the compilation buffer, depending on the count.
    This modifies the same cursor that |:NextError| and |:PrevError| operate
    on.

    The default count is 1, which means jump to the first error.

    The following commands work when prefixed to `:FirstError`:

    - |:vert|
    - |:aboveleft|, |:belowright|, |:topleft| and |:botright|
    - |:silent|
    - |:hide|
    - |:tab|

    These commands will affect the way windows are created when jumping to
    errors, if there's a need to open a new window.


:CurrentError                                                  *:CurrentError*
    Jump to the current error in the compilation buffer. This works using the
    same cursor that |:NextError| and |:PrevError| operate on, and acts as a
    way to jump back to the error you were working after a bit of iteration
    and jumping through files. As long as the current error is before the
    first error (the default until |:NextError| has not yet been used) this
    command has no effect and reports on this fact.

    The following commands work when prefixed to `:CurrentError`:

    - |:vert|
    - |:aboveleft|, |:belowright|, |:topleft| and |:botright|
    - |:silent|
    - |:hide|
    - |:tab|

    These commands will affect the way windows are created when jumping to
    errors, if there's a need to open a new window.

:NextError                                                        *:NextError*
:[N]NextError
    Jump to the next error in the compilation buffer. This does not take the
    cursor into effect - it simply starts at the first error in the buffer and
    continues, one by one, from there. Once the last error in the buffer is
    reached the command has no effect and reports on this fact.

    If passed a count, jumps N errors forwards instead.

    The following commands work when prefixed to `:NextError`:

    - |:vert|
    - |:aboveleft|, |:belowright|, |:topleft| and |:botright|
    - |:silent|
    - |:hide|
    - |:tab|

    These commands will affect the way windows are created when jumping to
    errors, if there's a need to open a new window.

:PrevError                                                        *:PrevError*
:[N]PrevError
    Jump to a prior error in the compilation buffer. This does not take the
    cursor into effect - it simply starts at the current error in the buffer
    and continues backwards, one by one, from there. As long as the current
    error is before the first error (the default until |:NextError| has not
    yet been used) this command has no effect and reports on this fact.

    If passed a count, jumps N errors backwards instead.

    The following commands work when prefixed to `:PrevError`:

    - |:vert|
    - |:aboveleft|, |:belowright|, |:topleft| and |:botright|
    - |:silent|
    - |:hide|
    - |:tab|

    These commands will affect the way windows are created when jumping to
    errors, if there's a need to open a new window.

:QuickfixErrors                                              *:QuickfixErrors*
    Load all compilation errors into the quickfix list, replacing it (uses
    |compile-mode.send_to_qflist()|), and then opens the quickfix window using
    `:botright copen` (see |:botright| and |:copen|).

    Mapped to `<C-q>` within the compilation buffer.

:NextErrorFollow                                            *:NextErrorFollow*
    Toggles "Next Error Follow" mode, which causes the error under the cursor
    to be previewed in another window whenever you move a line in the
    compilation buffer.

    Mapped to `<C-g>f` within the compilation buffer.

:CompileGotoError                                          *:CompileGotoError*
    Only available within the compilation buffer itself.

    Jump to the error present in the line under the cursor. If no such error
    exists, the command reports on this fact.

    The following commands work when prefixed to `:CompileGotoError`:

    - |:vert|
    - |:aboveleft|, |:belowright|, |:topleft| and |:botright|
    - |:silent|
    - |:hide|
    - |:tab|

    These commands will affect the way windows are created when jumping to
    errors, if there's a need to open a new window.

    Mapped to `<CR>` within the compilation buffer.

:CompileNextError                                          *:CompileNextError*
:[N]CompileNextError
    Only available within the compilation buffer itself.

    Move to the line of the next error within the compilation buffer. Does not
    jump to the error's actual file.

    If passed a count, moves N errors forwards instead.

    You can run this command using |:silent| to disable any messages.

    Mapped to `<C-g>n` within the compilation buffer.

:CompileNextFile                                            *:CompileNextFile*
:[N]CompileNextFile
    Only available within the compilation buffer itself.

    Move to the line of the next error within the compilation buffer that has
    a different file to the current error. Does not jump to the error's actual
    file.

    If passed a count, moves N files forwards instead.

    You can run this command using |:silent| to disable any messages.

    Mapped to `<C-g>]` within the compilation buffer.

:CompilePrevError                                          *:CompilePrevError*
:[N]CompilePrevError
    Only available within the compilation buffer itself.

    Move to the line of the previous error within the compilation buffer. Does
    not jump to the error's actual file.

    If passed a count, moves N errors backwards instead.

    You can run this command using |:silent| to disable any messages.

    Mapped to `<C-g>p` within the compilation buffer.

:CompilePrevFile                                            *:CompilePrevFile*
:[N]CompilePrevFile
    Only available within the compilation buffer itself.

    Move to the line of the previous error within the compilation buffer that
    has a different file to the current error. Does not jump to the error's
    actual file.

    If passed a count, moves N files backwards instead.

    You can run this command using |:silent| to disable any messages.

    Mapped to `<C-g>[` within the compilation buffer.

:CompileInterrupt                                          *:CompileInterrupt*
:[N]CompileInterrupt
    Only available within the compilation buffer itself.

    Interrupt the currently running compilation command, reporting on this in
    the compilation buffer.

    Mapped to `<C-c>` within the compilation buffer.

==============================================================================
8. Highlights                                        *compile-mode-highlights*

CompileModeError                                         *hl-CompileModeError*
    The filename of compilation errors.

    Example:

    >
    README.md:[1,1] error
    ^^^^^^^^^
<

CompileModeInfo                                           *hl-CompileModeInfo*
    The filename of `INFO` level errors.

    Example:

    >
    [INFO] README.md:[1,1] error
           ^^^^^^^^^
<

CompileModeWarning                                     *hl-CompileModeWarning*
    The filename of `WARNING` level errors.

    Example:

    >
    [WARNING] README.md:[1,1] error
              ^^^^^^^^^
<

CompileModeMessage                                     *hl-CompileModeMessage*
    The entirety of the compilation error message (i.e. the entire match of
    the regex from `error_regexp_table`).

    Example:

    >
    README.md:[1,1] error
    ^^^^^^^^^^^^^^^^
<

CompileModeMessageRow                               *hl-CompileModeMessageRow*
    The row number of compilation errors.

    Example:

    >
    README.md:[1,1] error
               ^
<
CompileModeMessageCol                               *hl-CompileModeMessageCol*
    The column number of compilation errors.

    Example:

    >
    README.md:[1,1] error
                 ^
<

CompileModeCommandOutput                         *hl-CompileModeCommandOutput*
    The prefix of a command output (anything that prefixes an output with a
    colon).

    Example:

    >
    make: Nothing to be done for 'all'.
    ^^^^^
<

CompileModeOutputFile                               *hl-CompileModeOutputFile*
    The output file of a certain command, found after the `-o`, `--output`, or
    `--output-file` flag of a command.

    Example:

    >
    gcc -o main main.c
           ^^^^
<

CompileModeCheckTarget                             *hl-CompileModeCheckTarget*
    The target of a "checking" message (usually from `./configure`).

    Example:

    >
    checking for gcc... gcc
                 ^^^
<

CompileModeCheckResult                             *hl-CompileModeCheckResult*
    The result of a "checking" message (usually from `./configure`).

    Example:

    >
    checking for gcc... gcc
                        ^^^
<

CompileModeDirectoryMessage                   *hl-CompileModeDirectoryMessage*
    The directory name in a "Leaving directory"/"Entering directory" message.

    Example:

    >
    make[1]: Entering directory '/home/user/build/directory'
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
<

CompileModeErrorLocus                               *hl-CompileModeErrorLocus*
    The highlighting used in the source of an error when jumping to that
    error's locus.


==============================================================================
9. Autocmd                                              *compile-mode-autocmd*

You can create custom autocommands (see |:autocmd|) for certain compile-mode
events by defining autocommands for the |User| event with the following
patterns:

CompilationFinished                                      *CompilationFinished*
    Invoked when the compilation is finished. The |event-data| is a table with
    the following keys:

	- {command} (string) the compilation command that finished executing
	- {code} (integer) the exit code of the executed command
	- {bufnr} (integer) the buffer ID for the compilation buffer with the
	  output of the command

 vim:tw=78:ts=8:noet:ft=help:norl:
